c
expect(JSON.parse(response.body)['title']).to eq(["can't be blank"])
(JSON.parse(response.body)[['title']])
(JSON.parse(response.body)['title'])
c
(JSON.parse(response.body)['title']).to eq("can't be blank")
(JSON.parse(response.body)['title'])
(JSON.parse(response.body)[['title']])
(JSON.parse(response.body)['title'])
JSON.parse(response.body)
(JSON.parse(response.body)['errors'])
response.body
c
(JSON.parse(response.body)['errors'])
response.body
response.statusresponse.body
c
response.body
c
response.body
response.status
c
response.body
response.status
c
response.body
response.status
c
(JSON.parse(response.body)['message']).to eq("Article of Current User Delete Succesfully")
response.body
response.body'
response
c
(response).to have_http_status :ok
response.body
a = JSON.parse(response.body)['title']
response
c
a = JSON.parse(response.body)['title']
JSON.parse(response.body)['title']
JSON.parse(response.body)
response.body
response
c
(JSON.parse(response.body)['title']).to eq("hi")
(JSON.parse(response.body)['title']).to eq("hi)
JSON.parse(response.body)['title']
JSON.parse(response.body)['data']
JSON.parse(response.body)
((response.body)[""])
((response.body)["article"])
((response.body)["title"])
9(response.body)["title"])
(response.body)(["title"])
(response.body)("title")
(response.body)
(assigns(:articles))
(response.body)['id']
(response.body)['title']
response.body
(response.body)['attributes']
(response.body)['article']
(response.body)['article'])
response.body
c
(assigns(:article))
response.body
c
(JSON.parse(response.body)['errors']).to eq("Nil JSON web token")
(JSON.parse(response.body)['errors'])
(response.body)['errors'])
response.body
(response.body)['errors']
(response.body)['errors'])
(response.body)['errors']
(response.body)['errors'])
response.body
c
(JSON.parse(response.body)['errors']).to eq("Nil JSON web token")
(JSON.parse(response.body)['errors'])
(JSON.parse(response.body))
(JSON.parse(response.body)
(response.body)[errors']
(response.body)['first']
(response.body)['errors']
(response.body)[errors]
(response.body).[errors]
(response.body).errors
(response.body).error
response.body
response.status
expect(assigns(:article)).to eq(article)
article
 expect(response.status).to eq(200)
response.status
@token
c
response.body[c]
response.body
c
response.body
article
(assigns(:article)).to eq(article)
(assigns(:articles).count).to eq(2)
response.body
c
(assigns[:articles].size).to eq(article.id)
(assigns[:articles].size).to eq(articl.id)
(assigns[:articles].size).to eq(articles)
(assigns[:articles].size).to eq(article)
(assigns[:articles].size).to eq(articles)
(assigns[:articles].size)
(assigns[:articles].size).to eq 2
(assigns[:users].size).to eq 2
(JSON.parse(response.body)['count'])
(JSON.parse(response.body){})
(JSON.parse(response.body)['id']
response.body
@token
c
(JSON.parse(response.body).count).to eq(1)
JSON.parse(response.body).count
JSON.parse(response.body).first
JSON.parse(response.body)
response.body
c
JSON.parse(response.body)
(JSON.parse(response.body)['count']).to eq(1)
expect(JSON.parse(response.body)['count']).to eq(1)
(JSON.parse(response.body)['count'])
JSON.parse(response.body)['count']
JSON.parse(response.body)
response.status
c
response.body
response.status
c
user
c
@token
c
params: {token: @token, user: {first_name: "abcd", last_name: "def", id: user.id } }
c
params
request.headers['token'] = @token
c
response.status
c
@user.update!
@user.update?
@user.update
user_params
@user.errors.full_messages
 @user.update(user_params)
c
@user.present?
@user = User.find_by_id(params[:id])
c
@user.errors.full_messages
@user.update(user_params)
c
@user.present?
@user.present
@user = User.find_by_id(params[:id])
c
response.status
c
@user.errors.full_messages
@user.update(user_params)
c
if @user.present?
@user.present
 @user = User.find_by_id(params[:id])
c
response.status
c
response.status
c
response.status
user
c
response.body
user
c
user.save
  user = User.new(user_params)
c
response.status
response.body
c
user.save
user = User.new(user_params)
c
response.status
response.body
user
c
user.save
 user = User.new(user_params)
c
user.errors.full_messages
user.save
user = User.new(user_params)
c
@token
c
@token
request.headers['token'] = @token
 let!(:user) { FactoryBot.create(:user) }
c
 user['token'] = token
user = UserSerializer.new(user).serializable_hash
token = JsonWebToken.encode(user_id: user.id)
user.save
 user = User.new(user_params)
c
request.headers['token'] = @token
 request.headers
c
JSON.parse(response.body)['message']
JSON.parse(response.body)
 response.body[:message]
 response.body
 response.body[0]['message']
 response.body['message']
 response.body
c
response.body
c
response.body
c
params
   38:             email: "abc@gmail.com", age: 14, password: "123456", password_confirmation: "123456", username: "test"} }
params: {user: {first_name: "abc", last_name: "dfdf", 
c
200
response.status
@token
c
validate_presence_of(:title)
it { expect(article).to validate_presence_of(:body) }
 it { should validate_presence_of(:title) }
c
 params.require(:article).permit(:title, :body, :user_id)
article
c
article = @current_user.articles.new(article_params)
@current_user.articles
@current_user
c
expect(response.status).to eq(200)
response.status
response
request.headers['token'] = @token
request.headers
@token
